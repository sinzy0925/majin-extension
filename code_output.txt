このエラーをなんとかつぶしたい

The specified value "" does not conform to the required format. The format is "#rrggbb" where rr, gg, bb are two-digit hexadecimal numbers.
コンテキスト
popup.html
スタック トレース
popup.js:94 (無名関数)


---


- フォルダ名: .
- ファイル名: 0.gs
- 内容:
const str_FOOTER_TEXT = `© ${new Date().getFullYear()} Google Inc.`;
const str_LOGOS_header= 'https://upload.wikimedia.org/wikipedia/commons/thumb/2/2f/Google_2015_logo.svg/640px-Google_2015_logo.svg.png';
const str_LOGOS_closing= 'https://upload.wikimedia.org/wikipedia/commons/thumb/2/2f/Google_2015_logo.svg/640px-Google_2015_logo.svg.png';
const str_primary_color= '#4285F4';
const str_bg_gradient_start_color= '#FFFFFF';
const str_bg_gradient_end_color= '#00FFFF';
const str_content_background_image_url= null;
const str_title_background_image_url= null; 
const str_closing_background_image_url= null; 




---


- フォルダ名: .
- ファイル名: 1.gs
- 内容:
// --- 1. 実行設定 ---
const SETTINGS = {
SHOULD_CLEAR_ALL_SLIDES: true,
TARGET_PRESENTATION_ID: null
};

// --- 2. マスターデザイン設定 (Pixel Perfect Ver.) ---
const CONFIG = {
BASE_PX: { W: 960, H: 540 },

// レイアウトの基準となる不変のpx値
POS_PX: {
titleSlide: {
logo:       { left: 55,  top: 105,  width: 135 },
title:      { left: 50,  top: 200, width: 830, height: 90 },
date:       { left: 50,  top: 450, width: 250, height: 40 },
},

// 共通ヘッダーを持つ各スライド  
contentSlide: {  
  headerLogo:     { right: 20, top: 20, width: 75 },  
  title:          { left: 25, top: 50,  width: 830, height: 65 },  
  titleUnderline: { left: 25, top: 118, width: 260, height: 4 },  
  subhead:        { left: 25, top: 130, width: 830, height: 40 },  
  body:           { left: 25, top: 172, width: 910, height: 290 },  
  twoColLeft:     { left: 25,  top: 172, width: 440, height: 290 },  
  twoColRight:    { left: 495, top: 172, width: 440, height: 290 }  
},  
compareSlide: {  
  headerLogo:     { right: 20, top: 20, width: 75 },  
  title:          { left: 25, top: 50,  width: 830, height: 65 },  
  titleUnderline: { left: 25, top: 118, width: 260, height: 4 },  
  subhead:        { left: 25, top: 130, width: 830, height: 40 },  
  leftBox:        { left: 25,  top: 152, width: 430, height: 290 },  
  rightBox:       { left: 485, top: 152, width: 430, height: 290 }  
},  
processSlide: {  
  headerLogo:     { right: 20, top: 20, width: 75 },  
  title:          { left: 25, top: 50,  width: 830, height: 65 },  
  titleUnderline: { left: 25, top: 118, width: 260, height: 4 },  
  subhead:        { left: 25, top: 130, width: 830, height: 40 },  
  area:           { left: 25, top: 152, width: 910, height: 290 }  
},  
timelineSlide: {  
  headerLogo:     { right: 20, top: 20, width: 75 },  
  title:          { left: 25, top: 50,  width: 830, height: 65 },  
  titleUnderline: { left: 25, top: 118, width: 260, height: 4 },  
  subhead:        { left: 25, top: 130, width: 830, height: 40 },  
  area:           { left: 25, top: 172, width: 910, height: 290 }  
},  
diagramSlide: {  
  headerLogo:     { right: 20, top: 20, width: 75 },  
  title:          { left: 25, top: 50,  width: 830, height: 65 },  
  titleUnderline: { left: 25, top: 118, width: 260, height: 4 },  
  subhead:        { left: 25, top: 130, width: 830, height: 40 },  
  lanesArea:      { left: 25, top: 172, width: 910, height: 290 }  
},  
cardsSlide: { // This POS_PX is used by both cards and headerCards
  headerLogo:     { right: 20, top: 20, width: 75 },  
  title:          { left: 25, top: 50,  width: 830, height: 65 },  
  titleUnderline: { left: 25, top: 118, width: 260, height: 4 },  
  subhead:        { left: 25, top: 130, width: 830, height: 40 },  
  gridArea:       { left: 25, top: 160, width: 910, height: 290 }  
},  
tableSlide: {  
  headerLogo:     { right: 20, top: 20, width: 75 },  
  title:          { left: 25, top: 50,  width: 830, height: 65 },  
  titleUnderline: { left: 25, top: 118, width: 260, height: 4 },  
  subhead:        { left: 25, top: 130, width: 830, height: 40 },  
  area:           { left: 25, top: 160, width: 910, height: 290 }  
},  
progressSlide: {  
  headerLogo:     { right: 20, top: 20, width: 75 },  
  title:          { left: 25, top: 50,  width: 830, height: 65 },  
  titleUnderline: { left: 25, top: 118, width: 260, height: 4 },  
  subhead:        { left: 25, top: 130, width: 830, height: 40 },  
  area:           { left: 25, top: 172, width: 910, height: 290 }  
},

quoteSlide: {
  headerLogo:     { right: 20, top: 20, width: 75 },
  title:          { left: 25, top: 50,  width: 830, height: 65 },
  titleUnderline: { left: 25, top: 118, width: 260, height: 4 },
  subhead:        { left: 25, top: 130, width: 830, height: 40 },
  quoteMark:      { left: 40, top: 180, width: 100, height: 100 },
  quoteText:      { left: 150, top: 210, width: 700, height: 150 },
  author:         { right: 110, top: 370, width: 700, height: 30 }
},

kpiSlide: {
  headerLogo:     { right: 20, top: 20, width: 75 },
  title:          { left: 25, top: 50,  width: 830, height: 65 },
  titleUnderline: { left: 25, top: 118, width: 260, height: 4 },
  subhead:        { left: 25, top: 130, width: 830, height: 40 },
  gridArea:       { left: 25, top: 172, width: 910, height: 290 }
},

statsCompareSlide: {
  headerLogo:     { right: 20, top: 20, width: 75 },
  title:          { left: 25, top: 50,  width: 830, height: 65 },
  titleUnderline: { left: 25, top: 118, width: 260, height: 4 },
  subhead:        { left: 25, top: 130, width: 830, height: 40 },
  leftArea:       { left: 25, top: 172, width: 430, height: 290 },
  rightArea:      { left: 485, top: 172, width: 430, height: 290 }
},

sectionSlide: {  
  title:      { left: 55, top: 230, width: 840, height: 80 },  
  ghostNum:   { left: 35, top: 120, width: 400, height: 200 }
},

footer: {  
  leftText:  { left: 15, top: 505, width: 250, height: 20 },  
  rightPage: { right: 15, top: 505, width: 50,  height: 20 }  
},  
bottomBar: { left: 0, top: 534, width: 960, height: 6 }  

},

FONTS: {
family: 'Arial', // デフォルト、プロパティから動的に変更可能
sizes: {
title: 32, 
sectionTitle: 30, 
contentTitle: 24, 
subhead: 20,
body: 16, 
laneTitle: 14, 
processStep: 17, 
date: 16, 
footer: 9, 
chip: 11, 
small: 10,
axis: 12, 
ghostNum: 180
}
},
COLORS: {
primary_color: str_primary_color, 
text_primary: '#333333', 

background_white: '#FFFFFF',
background_gray: '#f8f9fa', 

  // --- グラデーション用の色定義 ---
  background_gradient_start: str_bg_gradient_start_color, // グラデーション開始色 (白)
  background_gradient_end: str_bg_gradient_end_color,   // グラデーション終了色 (アクア)

faint_gray: '#e8eaed', lane_title_bg: '#f8f9fa',
table_header_bg: '#f8f9fa', lane_border: '#dadce0', card_bg: '#ffffff',
card_border: '#dadce0', neutral_gray: '#9e9e9e', ghost_gray: '#efefed'
},
DIAGRAM: {
laneGap_px: 24, lanePad_px: 10, laneTitle_h_px: 30, cardGap_px: 12,
cardMin_h_px: 48, cardMax_h_px: 70, arrow_h_px: 10, arrowGap_px: 8
},

LOGOS: {
header: str_LOGOS_header,
closing: str_LOGOS_header
},

BACKGROUNDS: {
    // 全本文スライド共通の背景画像URL。nullの場合はグラデーション背景になる。
    content_background_image_url: str_content_background_image_url,
    
    // （オプション）タイトルスライド専用の背景画像
    title_background_image_url: str_title_background_image_url, 
    
    // （オプション）クロージングスライド専用の背景画像
    closing_background_image_url: str_closing_background_image_url
},

FOOTER_TEXT: str_FOOTER_TEXT
};


---


- フォルダ名: .
- ファイル名: background.js
- 内容:
// background.js

// --- デフォルト設定 (初回起動時やリセット時に使用) ---
const DEFAULT_SETTINGS = {
  scriptId: "",
  deploymentId: "",
  apiKey: "",
  aiModel: 'gemini-2.5-flash-lite'
};

//const SCRIPT_ID = "1YUAmadVwnkM44Uld694CgPgmmkEFiSNmjklnhosfW7P6G7D5uAgv0R5o";
let activePort = null;

// --- 接続リスナー ---
chrome.runtime.onConnect.addListener((port) => {
  console.assert(port.name === "generate-channel");
  activePort = port;

  port.onMessage.addListener((msg) => {
    if (msg.action === "generateSlidesWithAI") {
      generateSlidesWithAI(msg.prompt, msg.settings);
    } else if (msg.action === "regenerateWithDesign") { // ▼▼▼ 追加 ▼▼▼
      regenerateWithDesign(msg.settings);
    }
  });

  port.onDisconnect.addListener(() => {
    activePort = null;
  });
});

// --- メッセージリスナー (popup.jsからの同期的な要求に応える) ---
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
  if (message.action === 'getDefaultApiSettings') {
    sendResponse({
      scriptId: DEFAULT_SETTINGS.scriptId,
      deploymentId: DEFAULT_SETTINGS.deploymentId,
      apiKey: DEFAULT_SETTINGS.apiKey,
      aiModel: DEFAULT_SETTINGS.aiModel
    });
  }
  return true;
});


// --- 進捗をポップアップに送信するヘルパー関数 ---
function sendProgress(response) {
  if (activePort) {
    activePort.postMessage(response);
  }
}

// --- 機能: デザイン設定で0.gsの内容を書き換える ---
function createFile0Source(baseSource, settings) {
    let source = baseSource;
    if (settings) {
        if (settings.footerText) { source = source.replace(/const str_FOOTER_TEXT = `.*`;/, `const str_FOOTER_TEXT = \`${settings.footerText}\`;`); }
        if (settings.headerLogo) { source = source.replace(/const str_LOGOS_header= '.*'/, `const str_LOGOS_header= '${settings.headerLogo}'`); }
        if (settings.closingLogo) { source = source.replace(/const str_LOGOS_closing= '.*'/, `const str_LOGOS_closing= '${settings.closingLogo}'`); }
        if (settings.primaryColor) { source = source.replace(/const str_primary_color= '.*';/, `const str_primary_color= '${settings.primaryColor}';`); }
        if (settings.bgStartColor) { source = source.replace(/const str_bg_gradient_start_color= '.*';/, `const str_bg_gradient_start_color= '${settings.bgStartColor}';`); }
        if (settings.bgEndColor) { source = source.replace(/const str_bg_gradient_end_color= '.*';/, `const str_bg_gradient_end_color= '${settings.bgEndColor}';`); }
        const formatUrl = (url) => url ? `"${url}"` : 'null';
        if (settings.titleBg !== undefined) { source = source.replace(/const str_title_background_image_url= .*?;/, `const str_title_background_image_url= ${formatUrl(settings.titleBg)};`); }
        if (settings.contentBg !== undefined) { source = source.replace(/const str_content_background_image_url= .*?;/, `const str_content_background_image_url= ${formatUrl(settings.contentBg)};`); }
        if (settings.closingBg !== undefined) { source = source.replace(/const str_closing_background_image_url= .*?;/, `const str_closing_background_image_url= ${formatUrl(settings.closingBg)};`); }
    }
    return source;
}

// --- メインのスライド生成関数 ---
async function generateSlidesWithAI(userPrompt, settings) {
  const startTime = new Date().getTime();
  try {
    const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/${settings.aiModel}:generateContent?key=${settings.apiKey}`;

    sendProgress({ status: 'progress', message: 'AIがスライド構成案を作成中...'});
    const slideDataString = await getSlideDataFromAI(userPrompt, API_URL);
    
    sendProgress({ status: 'progress', message: 'GASプロジェクトを準備中...'});
    const token = await getAuthToken();

    const baseFile0Source = await fetch(chrome.runtime.getURL('0.gs')).then(res => res.text());
    const file0Source = createFile0Source(baseFile0Source, settings);
    
    const file1Source = await fetch(chrome.runtime.getURL('1.gs')).then(res => res.text());
    const file3Source = await fetch(chrome.runtime.getURL('3.gs')).then(res => res.text());
    
    sendProgress({ status: 'progress', message: 'GASプロジェクトを更新中...'});
    const newSource = createProjectSource(file0Source, file1Source, slideDataString, file3Source);
    //await updateGasProject(SCRIPT_ID, token, newSource);
    await updateGasProject(settings.scriptId, token, newSource);

    sendProgress({ status: 'progress', message: '新バージョンを作成中...'});
    //const versionResponse = await createNewVersion(SCRIPT_ID, token);
    const versionResponse = await createNewVersion(settings.scriptId, token);
    const newVersionNumber = versionResponse.versionNumber;

    sendProgress({ status: 'progress', message: `デプロイを更新中 (v${newVersionNumber})...` });
    //await updateDeployment(SCRIPT_ID, settings.deploymentId, token, newVersionNumber);
    await updateDeployment(settings.scriptId, settings.deploymentId, token, newVersionNumber);

    sendProgress({ status: 'progress', message: 'スライドを生成しています...'});
    const WEB_APP_URL = `https://script.google.com/macros/s/${settings.deploymentId}/exec`;
    const result = await executeWebApp(WEB_APP_URL);

    const endTime = new Date().getTime();
    const elapsedTimeInSeconds = (endTime - startTime) / 1000;
    
    sendProgress({ status: 'success', message:  result.message + `<br>[${elapsedTimeInSeconds.toFixed(2)} 秒]` });

  } catch (error) {
    console.error("【CRITICAL ERROR】:", error);
    sendProgress({ status: 'error', message: error.message || '不明なエラーです。' });
  }
}

// --- ▼▼▼ 新しい関数 ▼▼▼ ---
// --- デザインのみ反映して再生成する関数 ---

async function regenerateWithDesign(settings) {
  const startTime = new Date().getTime();

    try {
        sendProgress({ status: 'progress', message: 'デザイン反映の準備を開始...'});
        const token = await getAuthToken();

        sendProgress({ status: 'progress', message: '現在のスライド構成(2.gs)を取得中...'});
        //const currentProject = await getGasProjectContent(SCRIPT_ID, token);
        const currentProject = await getGasProjectContent(settings.scriptId, token);
        const slideDataString = currentProject.files.find(f => f.name === '2')?.source;

        if (!slideDataString) {
            throw new Error("既存のスライド構成(2.gs)が見つかりません。先に一度「全自動で生成」を実行してください。");
        }

        const baseFile0Source = await fetch(chrome.runtime.getURL('0.gs')).then(res => res.text());
        const file0Source = createFile0Source(baseFile0Source, settings);

        const file1Source = await fetch(chrome.runtime.getURL('1.gs')).then(res => res.text());
        const file3Source = await fetch(chrome.runtime.getURL('3.gs')).then(res => res.text());
        
        sendProgress({ status: 'progress', message: 'GASプロジェクトを更新中...'});
        const newSource = createProjectSource(file0Source, file1Source, slideDataString, file3Source);
        await updateGasProject(settings.scriptId, token, newSource);

        sendProgress({ status: 'progress', message: '新バージョンを作成中...'});
        const versionResponse = await createNewVersion(settings.scriptId, token);
        const newVersionNumber = versionResponse.versionNumber;

        sendProgress({ status: 'progress', message: `デプロイを更新中 (v${newVersionNumber})...` });
        await updateDeployment(settings.scriptId, settings.deploymentId, token, newVersionNumber);

        sendProgress({ status: 'progress', message: 'スライドを再生成しています...'});
        const WEB_APP_URL = `https://script.google.com/macros/s/${settings.deploymentId}/exec`;
        const result = await executeWebApp(WEB_APP_URL);
        
        //sendProgress({ status: 'success', message: '完了: デザインが反映されました。' });
        const endTime = new Date().getTime();
        const elapsedTimeInSeconds = (endTime - startTime) / 1000;
        
        sendProgress({ status: 'success', message:  '完了: デザインが反映されました。' + `<br>[${elapsedTimeInSeconds.toFixed(2)} 秒]` });
    
    } catch (error) {
        console.error("【CRITICAL ERROR in regenerate】:", error);
        sendProgress({ status: 'error', message: error.message || '不明なエラーです。' });
    }
}
// --- ▲▲▲ 新しい関数ここまで ▲▲▲ ---


// -----------------------------------------------------------------------------
// --- 補助関数群 (変更なしのものは省略) ---
// -----------------------------------------------------------------------------

async function getSlideDataFromAI(userPrompt, apiUrl) {
  const systemPrompt = await fetch(chrome.runtime.getURL('system_prompt.txt')).then(res => res.text());
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), 120000);
  try {
    const response = await fetch(apiUrl, {
      method: "POST", headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        contents: [{ parts: [{ text: systemPrompt + "\n\n---\n\n" + userPrompt }] }],
        safetySettings: [
          { category: "HARM_CATEGORY_HARASSMENT", threshold: "BLOCK_NONE" }, { category: "HARM_CATEGORY_HATE_SPEECH", threshold: "BLOCK_NONE" },
          { category: "HARM_CATEGORY_SEXUALLY_EXPLICIT", threshold: "BLOCK_NONE" }, { category: "HARM_CATEGORY_DANGEROUS_CONTENT", threshold: "BLOCK_NONE" },
        ]
      }),
      signal: controller.signal
    });
    clearTimeout(timeoutId);
    if (!response.ok) { const errorData = await response.json(); throw new Error(`AI APIエラー: ${errorData.error.message}`); }
    const data = await response.json();
    if (!data.candidates || data.candidates.length === 0) { throw new Error("AIからの応答がありませんでした。"); }
    let rawText = data.candidates[0].content.parts[0].text;
    rawText = rawText.replace(/^```javascript\s*/, '').replace(/```\s*$/, '');
    return rawText.trim();
  } catch (error) {
    clearTimeout(timeoutId);
    if (error.name === 'AbortError') { throw new Error("AI APIからの応答がタイムアウトしました（120秒）。"); }
    throw error;
  }
}

function getAuthToken() {
  return new Promise((resolve, reject) => {
    chrome.identity.getAuthToken({ interactive: true }, (token) => {
      if (chrome.runtime.lastError) { reject(chrome.runtime.lastError); } else { resolve(token); }
    });
  });
}

function createProjectSource(file0,file1, file2, file3) {
  const manifestContent = `{
    "timeZone": "Asia/Tokyo",
    "dependencies": {},
    "exceptionLogging": "STACKDRIVER",
    "runtimeVersion": "V8",
    "webapp": { "executeAs": "USER_DEPLOYING", "access": "ANYONE_ANONYMOUS" },
    "oauthScopes": [
      "https://www.googleapis.com/auth/presentations",
      "https://www.googleapis.com/auth/drive.file"
    ]
  }`;  return {
    files: [
      { name: "appsscript", type: "JSON", source: manifestContent }, 
      { name: "0", type: "SERVER_JS", source: file0 },
      { name: "1", type: "SERVER_JS", source: file1 },
      { name: "2", type: "SERVER_JS", source: file2 }, 
      { name: "3", type: "SERVER_JS", source: file3 }
    ]
  };
}

async function updateGasProject(scriptId, token, source) {
  const url = `https://script.googleapis.com/v1/projects/${scriptId}/content`;
  const response = await fetch(url, {
    method: 'PUT', headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' },
    body: JSON.stringify(source)
  });
  if (!response.ok) { const errorData = await response.json(); throw new Error(`GASプロジェクトの更新に失敗: ${errorData.error.message}`); }
  return await response.json();
}

async function getGasProjectContent(scriptId, token) {
  const url = `https://script.googleapis.com/v1/projects/${scriptId}/content?fields=files(name,source)`;
  const response = await fetch(url, { method: 'GET', headers: { 'Authorization': `Bearer ${token}` } });
  if (!response.ok) { const errorData = await response.json(); throw new Error(`GASプロジェクト内容の取得に失敗: ${errorData.error.message}`); }
  return await response.json();
}

async function createNewVersion(scriptId, token) {
  const url = `https://script.googleapis.com/v1/projects/${scriptId}/versions`;
  const response = await fetch(url, {
    method: 'POST', headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' },
    body: JSON.stringify({ description: `Auto-deployed by extension at ${new Date().toISOString()}` })
  });
  if (!response.ok) { const errorData = await response.json(); throw new Error(`GASの新しいバージョンの作成に失敗: ${errorData.error.message}`); }
  return await response.json();
}

async function updateDeployment(scriptId, deploymentId, token, versionNumber) {
  const url = `https://script.googleapis.com/v1/projects/${scriptId}/deployments/${deploymentId}`;
  const response = await fetch(url, {
    method: 'PUT', headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' },
    body: JSON.stringify({
      deploymentConfig: { scriptId: scriptId, versionNumber: versionNumber, description: `Updated by extension to v${versionNumber}` }
    })
  });
  if (!response.ok) { const errorData = await response.json(); throw new Error(`GASのデプロイ更新に失敗: ${errorData.error.message}`); }
  return await response.json();
}

async function executeWebApp(url) {
  const response = await fetch(url, { method: 'POST', cache: 'no-cache' });
  if (!response.ok) { const errorText = await response.text(); throw new Error(`ウェブアプリ実行エラー: ステータス ${response.status}`); }
  const text = await response.text();
  try {
    const jsonResponse = JSON.parse(text);
    if (jsonResponse.logs && Array.isArray(jsonResponse.logs)) {
      console.groupCollapsed("📋 Google Apps Scriptからのログ");
      jsonResponse.logs.forEach(log => { console.log(log); sendProgress({ status: 'progress', message: log }); });
      console.groupEnd();
    }
    if (jsonResponse.status === 'error') { throw new Error(`GAS側でエラーが発生: ${jsonResponse.message}`); }
    return jsonResponse;
  } catch (e) {
    throw new Error("ウェブアプリ応答の解析に失敗しました。");
  }
}


---


- フォルダ名: .
- ファイル名: manifest.json
- 内容:
{
  "manifest_version": 3,
  "name": "スライド自動生成",
  "version": "5.0",
  "description": "AIと連携してGoogleスライドを自動生成します。",
  "action": {
    "default_popup": "popup.html"
  },
  "background": {
    "service_worker": "background.js"
  },
  "permissions": [
    "identity",
    "tabs",
    "storage" 
  ],
  "host_permissions": [
    "<all_urls>"
  ],
  "oauth2": {
    "client_id": "77855084094-c3jal48g1hd0emb487ggobtakrpsk6a2.apps.googleusercontent.com",
    "scopes": [
      "https://www.googleapis.com/auth/script.projects",
      "https://www.googleapis.com/auth/script.deployments"
    ]
  },
  "web_accessible_resources": [
    {
      "resources": [
        "0.gs",
        "1.gs",
        "3.gs",
        "system_prompt.txt"
      ],
      "matches": [ "<all_urls>" ]
    }
  ],
  "content_security_policy": {
    "extension_pages": "script-src 'self'; object-src 'self'; connect-src https://generativelanguage.googleapis.com/ https://script.googleapis.com/ https://script.google.com/ https://script.googleusercontent.com/;"
  }
}


---


- フォルダ名: .
- ファイル名: popup.html
- 内容:
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <style>
    body { width: 300px; padding: 10px; font-family: sans-serif; box-sizing: border-box; }
    h3 { text-align: center; margin-bottom: 10px; }
    h4 { text-align: left; font-weight: normal; color: #555; margin-top: 15px; border-bottom: 1px solid #eee; padding-bottom: 5px;}
    
    textarea, .settings-item input {
      width: 100%; padding: 8px; font-size: 14px; border: 1px solid #ccc; border-radius: 4px; box-sizing: border-box; margin-bottom: 10px;
    }
    textarea { height: 150px; resize: vertical; }

    button { padding: 12px; font-size: 16px; cursor: pointer; border: none; border-radius: 4px; }
    button:disabled { cursor: not-allowed; }
    
    #generate-button { width: 100%; background-color: #4285F4; color: white; margin-bottom: 15px; }
    #generate-button:disabled { background-color: #a0c3ff; }
    
    .settings-group1 {
      margin-top: 1px;
      background-color: #f0ffff; /* 薄いグレーの背景色を追加 */
      padding: 0px;            /* 内側の余白を追加 */
      border-radius: 10px;         /* 角を少し丸くする */
    }
    .settings-group2 {
      margin-top: 1px;
      background-color: #e0ffff; /* 薄いグレーの背景色を追加 */
      padding: 0px;            /* 内側の余白を追加 */
      border-radius: 10px;         /* 角を少し丸くする */
    }
    .settings-group3 {
      margin-top: 1px;
      background-color: #d0ffff; /* 薄いグレーの背景色を追加 */
      padding: 0px;            /* 内側の余白を追加 */
      border-radius: 10px;         /* 角を少し丸くする */
    }
    
    .settings-item { display: flex; align-items: center; margin-bottom: 12px; }
    .settings-item label { flex: 0 0 160px; font-size: 14px; color: #333; padding-right: 10px; }
    .settings-item input { flex: 1; margin-bottom: 0; }
    
    .regenerate-section { padding-top: 10px; border-top: 1px solid #ccc; }
    .settings { display: flex; align-items: center; margin-bottom: 10px; }
    .settings label { flex: 1; }
    
    #regenerate-button { width: 100%; background-color: #34A853; color: white; }
    #regenerate-button:disabled { background-color: #a7d7b4; }
    
    .action-buttons { display: flex; gap: 10px; margin-bottom: 5px; align-items: center; }
    .action-buttons button { width: 150px; font-size: 14px; padding: 8px; }
    #save-settings-button { background-color: #0F9D58; color: white; }
    #reset-settings-button { background-color: #6c757d; color: white; }
    #feedback-message { flex: 1; font-size: 14px; color: #0F9D58; padding-left: 10px; }

    .collapsible1 {
      cursor: pointer;
      user-select: none;
      font-weight: bold;
      text-align: left;
    }
    .collapsible1-content {
      padding-top: 10px;
      display: none;
      overflow: hidden;
    }

    .collapsible2 {
      cursor: pointer;
      user-select: none;
      font-weight: bold;
      text-align: left;
    }
    .collapsible2-content {
      padding-top: 10px;
      display: none;
      overflow: hidden;
    }

    .collapsible3 {
      cursor: pointer;
      user-select: none;
      font-weight: bold;
      text-align: left;
    }
    .collapsible3-content {
      padding-top: 10px;
      display: none;
      overflow: hidden;
    }

    /* ▼▼▼ 変更箇所 ▼▼▼ */
    #status-message {
      margin-top: 15px;
      font-size: 14px;
      min-height: 20px;
      text-align: center;
      color: #333;
      padding: 8px; /* 内側の余白を追加 */
      border-radius: 4px; /* 角を丸くする */
      background-color: #e8f0fe; /* 薄い青系の背景色 */
    }
    /* ▲▲▲ 変更箇所 ▲▲▲ */

    .vertical-item {
      flex-direction: column; /* 要素を縦並びにする */
      align-items: flex-start; /* 左揃えにする */
    }
    
    .vertical-item label {
      margin-top: 1px; /* ラベルと入力ボックスの間に余白を追加 */
      margin-bottom: 1px; /* ラベルと入力ボックスの間に余白を追加 */
      padding-right: 0; /* 右側の余白をリセット */
      flex: none;
    }
    

  </style>
</head>
<body>
  <h3>スライド原稿入力</h3>
  <textarea id="user-prompt" placeholder="ここにスライドにしたい内容を貼り付け..."></textarea>
  

    <div class="settings-group1">
      <h4 class="collapsible1">▼ API・GAS設定 (必須項目)</h4>
      <div class="collapsible1-content">
        <div class="settings-item vertical-item">
          <label for="script-id">Script ID</label>
          <input type="text" id="script-id">
        </div>
        <div class="settings-item vertical-item">
          <label for="deployment-id">Deployment ID</label>
          <input type="text" id="deployment-id">
        </div>
        <div class="settings-item vertical-item">
          <label for="api-key">API Key</label>
          <input type="password" id="api-key">
        </div>
        <div class="settings-item vertical-item">
          <label for="ai-model">AI Model</label>
          <input type="text" id="ai-model">
        </div>
      </div>
    </div>



    <div class="settings-group2">
      <h4 class="collapsible2">▼ ロゴ・フッターテキスト設定</h4>
        <div class="collapsible2-content">
          <div class="settings-item vertical-item">
            <label for="footer-text">フッターテキスト</label>
            <input type="text" id="footer-text" placeholder="読み込み中...">
          </div>
          <div class="settings-item vertical-item">
            <label for="header-logo">ヘッダーロゴURL</label>
            <input type="text" id="header-logo" placeholder="読み込み中...">
          </div>
          <div class="settings-item vertical-item">
            <label for="closing-logo">クロージングロゴURL</label>
            <input type="text" id="closing-logo" placeholder="読み込み中...">
          </div>
        </div>
    </div>

    <div class="settings-group3">
      <h4 class="collapsible3">▼ 背景画像設定</h4>
        <div class="collapsible3-content">
          <div class="settings-item vertical-item">
            <label for="title-bg">タイトル頁 背景画像URL</label>
            <input type="text" id="title-bg">
          </div>
          <div class="settings-item vertical-item">
            <label for="content-bg">本文 背景画像URL</label>
            <input type="text" id="content-bg">
          </div>
          <div class="settings-item vertical-item">
            <label for="closing-bg">最終頁 背景画像URL</label>
            <input type="text" id="closing-bg">
          </div>
        </div>
    </div>

    <div class="settings">
      <label for="primary-color">テーマカラー:</label>
      <input type="color" id="primary-color" value="#4285F4">
    </div>
    <div class="settings">
      <label for="bg-gradient-start-color">背景グラデーション[start]:</label>
      <input type="color" id="bg-gradient-start-color" value="#FFFFFF">
    </div>
    <div class="settings">
      <label for="bg-gradient-end-color">背景グラデーション[End]:</label>
      <input type="color" id="bg-gradient-end-color" value="#00FFFF">
    </div>

    

    <div class="action-buttons">
      <button id="save-settings-button">設定を保存</button>
      <button id="reset-settings-button">設定を初期化</button>
      <span id="feedback-message"></span>
    </div>


  <p id="status-message"></p>
  <button id="generate-button">全自動でスライドを生成</button>

  <div class="regenerate-section">
    <button id="regenerate-button">デザインを反映して再生成</button>
  </div>
  
  <script src="popup.js"></script>
</body>
</html>


---


- フォルダ名: .
- ファイル名: popup.js
- 内容:
// popup.js
document.addEventListener('DOMContentLoaded', () => {
  // --- DOM要素の取得 ---
  const userPrompt = document.getElementById('user-prompt');
  const statusMessage = document.getElementById('status-message');
  const generateBtn = document.getElementById('generate-button');
  const regenerateBtn = document.getElementById('regenerate-button');
  
  const designInputs = {
    footerText: document.getElementById('footer-text'),
    headerLogo: document.getElementById('header-logo'),
    closingLogo: document.getElementById('closing-logo'),
    titleBg: document.getElementById('title-bg'),
    contentBg: document.getElementById('content-bg'),
    closingBg: document.getElementById('closing-bg'),
    primaryColor: document.getElementById('primary-color'),
    bgStartColor: document.getElementById('bg-gradient-start-color'),
    bgEndColor: document.getElementById('bg-gradient-end-color'),
  };

  const apiInputs = {
    deploymentId: document.getElementById('deployment-id'),
    apiKey: document.getElementById('api-key'),
    aiModel: document.getElementById('ai-model'),
    scriptId: document.getElementById('script-id'),
  };

  const saveBtn = document.getElementById('save-settings-button');
  const resetBtn = document.getElementById('reset-settings-button');
  const feedbackMessage = document.getElementById('feedback-message');
  
  const collapsible1 = document.querySelector('.collapsible1');
  const collapsible1Content = document.querySelector('.collapsible1-content');
  const collapsible2 = document.querySelector('.collapsible2');
  const collapsible2Content = document.querySelector('.collapsible2-content');
  const collapsible3 = document.querySelector('.collapsible3');
  const collapsible3Content = document.querySelector('.collapsible3-content');

  const SETTINGS_KEY = 'userAppSettings';
  let port = null;

  // --- 機能: 折りたたみメニューの制御 ---
  collapsible1.addEventListener('click', () => {
    const isExpanded = collapsible1.classList.toggle('active');
    collapsible1Content.style.display = isExpanded ? 'block' : 'none';
    collapsible1.textContent = isExpanded ? '▲ API・GAS設定 (必須)' : '▼ API・GAS設定 (必須)';
  });

  collapsible2.addEventListener('click', () => {
    const isExpanded = collapsible2.classList.toggle('active');
    collapsible2Content.style.display = isExpanded ? 'block' : 'none';
    collapsible2.textContent = isExpanded ? '▲ ロゴ・フッターテキスト設定' : '▼ ロゴ・フッターテキスト設定';
  });

  collapsible3.addEventListener('click', () => {
    const isExpanded = collapsible3.classList.toggle('active');
    collapsible3Content.style.display = isExpanded ? 'block' : 'none';
    collapsible3.textContent = isExpanded ? '▲ 背景画像設定' : '▼ 背景画像設定';
  });

  // --- 機能: フィードバックメッセージを表示 ---
  function showFeedback(message, isError = false) {
    feedbackMessage.textContent = message;
    feedbackMessage.style.color = isError ? '#D93025' : '#0F9D58';
    setTimeout(() => { feedbackMessage.textContent = ''; }, 4000);
  }

  // --- 機能: デフォルト設定の取得 ---
  async function getDefaultSettings() {
    const designDefaults = await (async () => {
      try {
        const res = await fetch(chrome.runtime.getURL('0.gs'));
        const text = await res.text();
        return {
          footerText: (text.match(/const str_FOOTER_TEXT = `([^`]+)`/) || [])[1]?.replace('${new Date().getFullYear()}', new Date().getFullYear()) || '',
          headerLogo: (text.match(/const str_LOGOS_header= '([^']+)'/) || [])[1] || '',
          closingLogo: (text.match(/const str_LOGOS_closing= '([^']+)'/) || [])[1] || '',
          primaryColor: (text.match(/const str_primary_color= '([^']+)';/) || [])[1] || '#4285F4',
          bgStartColor: (text.match(/const str_bg_gradient_start_color= '([^']+)';/) || [])[1] || '#4285F4',
          bgEndColor: (text.match(/const str_bg_gradient_end_color= '([^']+)';/) || [])[1] || '#4285F4',
          titleBg: (text.match(/const str_title_background_image_url= (.*?);/) || [])[1]?.replace(/["']/g, '').replace('null', '') || '',
          contentBg: (text.match(/const str_content_background_image_url= (.*?);/) || [])[1]?.replace(/["']/g, '').replace('null', '') || '',
          closingBg: (text.match(/const str_closing_background_image_url= (.*?);/) || [])[1]?.replace(/["']/g, '').replace('null', '') || ''
        };
      } catch (e) { return {}; }
    })();
    const apiDefaults = await chrome.runtime.sendMessage({ action: "getDefaultApiSettings" });
    return { ...designDefaults, ...apiDefaults };
  }

  // --- 機能: 設定オブジェクトをフォームに反映 ---
  function applySettingsToForm(settings) {
    if (!settings) return;
    Object.keys(designInputs).forEach(key => { designInputs[key].value = settings[key] || ''; });
    Object.keys(apiInputs).forEach(key => { apiInputs[key].value = settings[key] || ''; });
  }
  
  // --- 機能: 現在のフォームの内容から設定オブジェクトを取得 ---
  function getSettingsFromForm() {
    const settings = {};
    Object.keys(designInputs).forEach(key => { settings[key] = designInputs[key].value.trim(); });
    Object.keys(apiInputs).forEach(key => { settings[key] = apiInputs[key].value.trim(); });
    return settings;
  }

  // --- メインの読み込み処理 ---
  async function loadSettings() {
    const saved = (await chrome.storage.local.get([SETTINGS_KEY]))[SETTINGS_KEY];
    if (saved && Object.keys(saved).length > 0) {
      applySettingsToForm(saved);
    } else {
      const defaults = await getDefaultSettings();
      applySettingsToForm(defaults);
    }
  }

  loadSettings();

  // --- イベントリスナー: 保存ボタン ---
  saveBtn.addEventListener('click', () => {
    const settingsToSave = getSettingsFromForm();
    chrome.storage.local.set({ [SETTINGS_KEY]: settingsToSave }, () => {
      showFeedback('✓ 設定を保存しました');
    });
  });

  // --- イベントリスナー: リセットボタン ---
  resetBtn.addEventListener('click', () => {
    chrome.storage.local.remove([SETTINGS_KEY], async () => {
      const defaults = await getDefaultSettings();
      applySettingsToForm(defaults);
      showFeedback('設定をリセットしました');
    });
  });

  // --- 機能: ボタンを無効化し、ポート接続を準備する共通関数 ---
  function startProcess(action, payload) {
    const allSettings = getSettingsFromForm();
    
    // 必須項目チェック
    if (!allSettings.scriptId || !allSettings.deploymentId || !allSettings.apiKey || !allSettings.aiModel) {
      statusMessage.textContent = "API・連携設定の必須項目を入力してください。";
      if (!collapsible.classList.contains('active')) {
        collapsible.click();
      }
      return;
    }

    if (action === 'generateSlidesWithAI' && !payload.prompt.trim()) {
        statusMessage.textContent = "プロンプトを入力してください。";
        return;
    }

    generateBtn.disabled = true;
    regenerateBtn.disabled = true;
    statusMessage.textContent = "処理を開始します...";

    if (port) port.disconnect();
    port = chrome.runtime.connect({ name: "generate-channel" });

    port.onMessage.addListener((msg) => {
        statusMessage.innerHTML = msg.message;
        if (msg.status === 'success' || msg.status === 'error') {
            generateBtn.disabled = false;
            regenerateBtn.disabled = false;
            if (port) port.disconnect();
        }
    });

    port.onDisconnect.addListener(() => {
        if (!statusMessage.textContent.startsWith("完了") && !statusMessage.textContent.startsWith("エラー")) {
            statusMessage.textContent = "エラー: 接続が予期せず切れました。";
        }
        generateBtn.disabled = false;
        regenerateBtn.disabled = false;
        port = null;
    });
    
    port.postMessage({ action, ...payload });
  }


  // --- イベントリスナー: 生成ボタンクリック ---
  generateBtn.addEventListener('click', () => {
    startProcess('generateSlidesWithAI', {
        prompt: userPrompt.value,
        settings: getSettingsFromForm()
    });
  });

  // --- イベントリスナー: 再生成ボタンクリック ---
  regenerateBtn.addEventListener('click', () => {
    startProcess('regenerateWithDesign', {
        settings: getSettingsFromForm()
    });
  });
});


---


- フォルダ名: .
- ファイル名: system_prompt.txt
- 内容:
## **1.0 PRIMARY_OBJECTIVE — 最終目標**

あなたは、ユーザーから与えられた非構造テキスト情報を解析し、後述する **【GOOGLE_TEMPLATE_BLUEPRINT】** で定義された Google Apps Script（GAS）フレームワーク内で機能する、**slideData** という名の JavaScript オブジェクト配列を**生成**することだけに特化した、超高精度データサイエンティスト兼プレゼンテーション設計AIです。

あなたの**絶対的かつ唯一の使命**は、ユーザーの入力内容から論理的なプレゼンテーション構造を抽出し、各セクションに最適な「表現パターン（Pattern）」を選定し、さらに各スライドで話すべき**発表原稿（スピーカーノート）のドラフト**まで含んだ、ブループリント内の `const slideData = [...]` を完全に置き換えるための、完璧でエラーのない JavaScript オブジェクト配列を生成することです。

**slideData の生成以外のタスクを一切実行してはなりません。** ブループリントのロジック、デザイン設定、関数名、変数名など、1文字たりとも変更することは固く禁じられています。あなたの思考と出力のすべては、最高の slideData を生成するためだけに費やされます。

## **2.0 GENERATION_WORKFLOW — 厳守すべき思考と生成のプロセス**

1.  **【ステップ1: コンテキストの完全分解と正規化】**  
   	* **分解**: ユーザー提供のテキスト（議事録、記事、企画書、メモ等）を読み込み、**目的・意図・聞き手**を把握。内容を「**章（Chapter）→ 節（Section）→ 要点（Point）**」の階層に内部マッピング。  
   	* **正規化**: 入力前処理を自動実行。（タブ→スペース、連続スペース→1つ、スマートクォート→ASCIIクォート、改行コード→LF、用語統一）  
2.  **【ステップ2: パターン選定と論理ストーリーの再構築】**  
   	* 章・節ごとに、後述の**サポート済み表現パターン**から最適なものを選定（例: 比較なら `compare`、時系列なら `timeline`）。  
   	* 聞き手に最適な**説得ライン**（問題解決型、PREP法、時系列など）へ再配列。  
3.  **【ステップ3: スライドタイプへのマッピング】**  
   	* ストーリー要素を **Googleパターン・スキーマ**に**最適割当**。  
   	* 表紙 → `title` / 章扉 → `section`（※背景に**半透明の大きな章番号**を描画） / 本文 → `content`, `compare`, `process`, `timeline`, `diagram`, `cards`, `headerCards`, `table`, `progress`, `quote`, `kpi`, `bulletCards`, `faq` / 結び → `closing`  
4.  **【ステップ4: オブジェクトの厳密な生成】**  
   	* **3.0 スキーマ**と**4.0 ルール**に準拠し、文字列をエスケープ（`'` → `\'`, `\` → `\\`）して1件ずつ生成。  
   	* **インライン強調記法**を使用可：  
   	 	* `**太字**` → 太字  
   	 	* `[[重要語]]` → **太字＋プライマリカラー**  
   	* **画像URLの抽出**: 入力テキスト内の `![](...png|.jpg|.jpeg|.gif|.webp)` 形式、または裸URLで末尾が画像拡張子のものを抽出し、該当スライドの `images` 配列に格納（説明文がある場合は `media` の `caption` に入れる）。  
   	* **スピーカーノート生成**: 各スライドの内容に基づき、発表者が話すべき内容の**ドラフトを生成**し、`notes`プロパティに格納する。  
5.  **【ステップ5: 自己検証と反復修正】**  
   	* **チェックリスト**:  
   	* 文字数・行数・要素数の上限遵守（各パターンの規定に従うこと）  
   	* 箇条書き要素に**改行（`\n`）を含めない**  
   	* テキスト内に**禁止記号**（`■` / `→`）を含めない（※装飾・矢印はスクリプトが描画）  
   	* 箇条書き文末に **句点「。」を付けない**（体言止め推奨）  
   	* **notesプロパティが各スライドに適切に設定されているか確認**  
   	* `title.date`は`YYYY.MM.DD`形式  
   	* **アジェンダ安全装置**: 「アジェンダ/Agenda/目次/本日お伝えすること」等のタイトルで `points` が空の場合、**章扉（`section.title`）から自動生成**するため、空配列を返さず **ダミー3点**以上を必ず生成  
6.  **【ステップ6: 最終出力】**  
   	* 検証済みオブジェクトを論理順に `const slideData = [...]` に格納。**【GOOGLE_TEMPLATE_BLUEPRINT】全文**をそのまま出力し、**サンプルの slideData ブロックだけ**をあなたが生成した `slideData` で**完全置換**した **単一 .gs ファイルの中身**のみを出力すること。**解説・前置き・後書き一切禁止**。

## **3.0 slideDataスキーマ定義（GooglePatternVer.+SpeakerNotes）**

**共通プロパティ**

  * `notes?: string`: すべてのスライドオブジェクトに任意で追加可能。スピーカーノートに設定する発表原稿のドラフト（プレーンテキスト）。

**スライドタイプ別定義**

  * **タイトル**: `{ type: 'title', title: '...', date: 'YYYY.MM.DD', notes?: '...' }`  
  * **章扉**: `{ type: 'section', title: '...', sectionNo?: number, notes?: '...' }` ※`sectionNo` を指定しない場合は自動連番  
  * **クロージング**: `{ type: 'closing', notes?: '...' }`

**本文パターン（必要に応じて選択）**

  * **content（1カラム/2カラム＋画像＋小見出し）** `{ type: 'content', title: '...', subhead?: string, points?: string[], twoColumn?: boolean, columns?: [string[], string[]], images?: (string | { url: string, caption?: string })[], notes?: '...' }`  
  
  * **compare（対比）** `{ type: 'compare', title: '...', subhead?: string, leftTitle: '...', rightTitle: '...', leftItems: string[], rightItems: string[], images?: string[], notes?: '...' }`  
  * **process（手順・工程）** `{ type: 'process', title: '...', subhead?: string, steps: string[], images?: string[], notes?: '...' }`  
  * **timeline（時系列）** `{ type: 'timeline', title: '...', subhead?: string, milestones: { label: string, date: string, state?: 'done'|'next'|'todo' }[], images?: string[], notes?: '...' }`  
  * **diagram（レーン図）** `{ type: 'diagram', title: '...', subhead?: string, lanes: { title: string, items: string[] }[], images?: string[], notes?: '...' }`  
  * **cards（シンプルカード）** `{ type: 'cards', title: '...', subhead?: string, columns?: 2|3, items: (string | { title: string, desc?: string })[], images?: string[], notes?: '...' }`  
  * **headerCards（ヘッダー付きカード）** `{ type: 'headerCards', title: '...', subhead?: string, columns?: 2|3, items: { title: string, desc?: string }[], images?: string[], notes?: '...' }`
  * **table（表）** `{ type: 'table', title: '...', subhead?: string, headers: string[], rows: string[][], notes?: '...' }`  
  * **progress**（進捗） `{ type: 'progress', title: '...', subhead?: string, items: { label: string, percent: number }[], notes?: '...' }`  
  * **quote**（引用） `{ type: 'quote', title: '...', subhead?: string, text: string, author: string, notes?: '...' }`  
  * **kpi**（KPIカード） `{ type: 'kpi', title: '...', subhead?: string, columns?: 2|3|4, items: { label: string, value: string, change: string, status: 'good'|'bad'|'neutral' }[], notes?: '...' }`  
  * **bulletCards**（箇条書きカード） `{ type: 'bulletCards', title: '...', subhead?: string, items: { title: string, desc: string }[], notes?: '...' }` ※最大3項目  
  * **faq**（よくある質問） `{ type: 'faq', title: '...', subhead?: string, items: { q: string, a: string }[], notes?: '...' }`
  * **statsCompare**（数値比較） `{ type: 'statsCompare', title: '...', subhead?: string, leftTitle: '...', rightTitle: '...', stats: { label: string, leftValue: string, rightValue: string, trend?: 'up'|'down'|'neutral' }[], notes?: '...' }`


## **4.0 COMPOSITION_RULES（GooglePatternVer.） — 美しさと論理性を最大化する絶対規則**

  * **全体構成**:  
    1. `title`（表紙）  
    2. `content`（アジェンダ、※章が2つ以上のときのみ）  
    3. `section`  
    4. 本文（`content`/`compare`/`process`/`timeline`/`diagram`/`cards`/`headerCards`/`table`/`progress`/`quote`/`kpi`/`bulletCards`/`faq` から2〜5枚）  
    5. （3〜4を章の数だけ繰り返し）  
    6. `closing`（結び）  
  * **テキスト表現・字数**（最大目安）:  
   	* `title.title`: 全角35文字以内  
   	* `section.title`: 全角30文字以内  
   	* 各パターンの `title`: 全角40文字以内  
   	* `subhead`: 全角50文字以内（フォント18）  
   	* 箇条書き等の要素テキスト: 各90文字以内・**改行禁止**  
   	* `notes`（スピーカーノート）: 発表内容を想定したドラフト。**プレーンテキスト**とし、強調記法は用いないこと。  
   	* **禁止記号**: `■` / `→` を含めない（矢印や区切りはスクリプト側が描画）  
   	* 箇条書き文末の句点「。」**禁止**（体言止め推奨）  
   	* **インライン強調記法**: `**太字**` と `[[重要語]]`（太字＋プライマリカラー）を必要箇所に使用可

## **5.0 SAFETY_GUIDELINES — GASエラー回避とAPI負荷の配慮**

  * スライド上限: **最大50枚**  
  * 画像制約: **50MB未満・25MP以下**の **PNG/JPEG/GIF/WebP**  
  * 実行時間: Apps Script 全体で約 **6分**  
  * テキストオーバーフロー回避: 本命令の**上限値厳守**  
  * フォント: Arial が無い環境では標準サンセリフに自動フォールバック  
  * 文字列リテラルの安全性: `'` と `\` を確実にエスケープ  
  * **画像挿入の堅牢性**: ロゴ画像の挿入に失敗した場合でも画像部分をスキップして、テキストや図形などの他の要素は正常に描画を継続  
  * **実行堅牢性**: スライド1枚の生成でエラー（例: 不正な画像URL）が発生しても**全体の処理が停止しない**よう、`try-catch`構文によるエラーハンドリングが実装されています。

## **6.0 OUTPUT_FORMAT — 最終出力形式**

**【最重要】**
あなたの唯一の出力は、ユーザープロンプトを解析して生成した `const slideData = [...]` という**JavaScriptのコードブロックのみ**です。

以下のルールを**絶対に**守ってください。

*   `const slideData = [` で始まり、 `];` で終わるコードブロックだけを出力します。
*   `/** ... */` のようなファイルの先頭コメントや、その他の説明文は一切含めないでください。
*   `generatePresentation` や `createTitleSlide` などの関数定義は一切含めないでください。
*   コードブロックの前後に、解説、言い訳、挨拶、` ```javascript ` のようなMarkdownのコードフェンスなどを一切付けないでください。

**【正しい出力形式の例】**
```javascript
const slideData = [
  { type: 'title', title: 'Google Workspace 新機能提案', date: '2025.08.24', notes: '本日は、AIを活用した新しいコラボレーション機能についてご提案します。' },
  {
    type: 'bulletCards',
    title: '提案する3つの新機能',
    subhead: 'チームの生産性をさらに向上させるためのコンセプト',
    items: [
      {
        title: 'AIミーティングサマリー',
        desc: 'Google Meetでの会議内容をAIが自動で要約し、[[決定事項とToDoリストを自動生成]]します。'
      },
      {
        title: 'スマート・ドキュメント連携',
        desc: 'DocsやSheetsで関連するファイルやデータをAIが予測し、[[ワンクリックで参照・引用]]できるようにします。'
      },
      {
        title: 'インタラクティブ・チャット',
        desc: 'Google Chat内で簡易的なアンケートや投票、承認フローを[[コマンド一つで実行]]可能にします。'
      }
    ],
    notes: '今回ご提案するのは、この3つの新機能です。それぞれが日々の業務の非効率を解消し、チーム全体の生産性向上を目指しています。'
  },
  {
    type: 'faq',
    title: '想定されるご質問',
    subhead: '本提案に関するQ&A',
    items: [
      { q: '既存のプランで利用できますか？', a: 'はい、Business Standard以上のすべてのプランで、追加料金なしでご利用いただける想定です。' },
      { q: '対応言語はどうなりますか？', a: '初期リリースでは日本語と英語に対応し、順次対応言語を拡大していく計画です。' },
      { q: 'セキュリティは考慮されていますか？', a: 'もちろんです。すべてのデータは既存のGoogle Workspaceの[[堅牢なセキュリティ基準]]に準拠して処理されます。' }
    ],
    notes: 'ご提案にあたり、想定される質問をまとめました。ご不明な点がございましたら、お気軽にご質問ください。'
  },
  { type: 'closing', notes: '本日のご提案は以上です。ご清聴いただき、ありがとうございました。' }
];```





